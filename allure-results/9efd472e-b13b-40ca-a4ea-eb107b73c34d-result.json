{"name": "Test 01: Verify Login to Grafana", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\n  (Session info: chrome=131.0.6778.140)\nStacktrace:\n\tGetHandleVerifier [0x010EEC13+23731]\n\t(No symbol) [0x0107C394]\n\t(No symbol) [0x00F5BE63]\n\t(No symbol) [0x00F59CD8]\n\t(No symbol) [0x00F4D938]\n\t(No symbol) [0x00F4F230]\n\t(No symbol) [0x00F4DB87]\n\t(No symbol) [0x00F4D527]\n\t(No symbol) [0x00F4D441]\n\t(No symbol) [0x00F4B8DB]\n\t(No symbol) [0x00F4BE2B]\n\t(No symbol) [0x00F5E85E]\n\t(No symbol) [0x00FDBE87]\n\t(No symbol) [0x00FC1E5C]\n\t(No symbol) [0x00FDB46E]\n\t(No symbol) [0x00FC1BF6]\n\t(No symbol) [0x00F93F35]\n\t(No symbol) [0x00F94EBD]\n\tGetHandleVerifier [0x013CF0D3+3039603]\n\tGetHandleVerifier [0x013E2DEA+3120778]\n\tGetHandleVerifier [0x013DB592+3089970]\n\tGetHandleVerifier [0x011843B0+635984]\n\t(No symbol) [0x01084DCD]\n\t(No symbol) [0x01082068]\n\t(No symbol) [0x01082205]\n\t(No symbol) [0x01074FD0]\n\tBaseThreadInitThunk [0x75A9FCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x775B809E+286]\n\tRtlGetAppContainerNamedObjectPath [0x775B806E+238]", "trace": "request = <SubRequest 'init_web_driver' for <Function test_verify_login>>\n\n    @pytest.fixture(scope='class')\n    def init_web_driver(request):\n        if get_data('Execute_Applitools').lower() == 'yes':\n            # אם Execute_Applitools הוא 'yes', נשתמש ב-Applitools\n            globals()['driver'] = get_web_driver()\n            # הגדרת ה-API Key של Applitools\n        else:\n            # אחרת, נשתמש ב-EventFiringWebDriver כרגיל\n            edriver = get_web_driver()\n            globals()['driver'] = EventFiringWebDriver(edriver, EventListener())\n    \n        driver = globals()['driver']\n        # הגדרות נוספות לדרייבר\n        driver.set_window_position(0, 0)\n        driver.set_window_size(1920, 1080)\n        driver.implicitly_wait(int(get_data('wait_time')))\n>       driver.get(get_data('url'))\n\ntest_cases\\conftest.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\event_firing_webdriver.py:81: in get\n    self._dispatch(\"navigate_to\", (url, self._driver), \"get\", (url,))\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\event_firing_webdriver.py:114: in _dispatch\n    result = getattr(self._driver, d_call)(*d_args)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:363: in get\n    self.execute(Command.GET, {\"url\": url})\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000020B3D296C30>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_REFUSED\\\\n  ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x775B809E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x775B806E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\nE         (Session info: chrome=131.0.6778.140)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x010EEC13+23731]\nE       \t(No symbol) [0x0107C394]\nE       \t(No symbol) [0x00F5BE63]\nE       \t(No symbol) [0x00F59CD8]\nE       \t(No symbol) [0x00F4D938]\nE       \t(No symbol) [0x00F4F230]\nE       \t(No symbol) [0x00F4DB87]\nE       \t(No symbol) [0x00F4D527]\nE       \t(No symbol) [0x00F4D441]\nE       \t(No symbol) [0x00F4B8DB]\nE       \t(No symbol) [0x00F4BE2B]\nE       \t(No symbol) [0x00F5E85E]\nE       \t(No symbol) [0x00FDBE87]\nE       \t(No symbol) [0x00FC1E5C]\nE       \t(No symbol) [0x00FDB46E]\nE       \t(No symbol) [0x00FC1BF6]\nE       \t(No symbol) [0x00F93F35]\nE       \t(No symbol) [0x00F94EBD]\nE       \tGetHandleVerifier [0x013CF0D3+3039603]\nE       \tGetHandleVerifier [0x013E2DEA+3120778]\nE       \tGetHandleVerifier [0x013DB592+3089970]\nE       \tGetHandleVerifier [0x011843B0+635984]\nE       \t(No symbol) [0x01084DCD]\nE       \t(No symbol) [0x01082068]\nE       \t(No symbol) [0x01082205]\nE       \t(No symbol) [0x01074FD0]\nE       \tBaseThreadInitThunk [0x75A9FCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x775B809E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x775B806E+238]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException"}, "description": "This Test verifies a successful login to Grafana", "attachments": [{"source": "c313fd3e-343d-4db8-9016-698805f58189-attachment.png", "type": "image/png"}], "start": 1735229250044, "stop": 1735229250044, "uuid": "b526d471-b128-484e-93ef-bd8c87257a8b", "testCaseId": "4727d0277c9099c0888dae150522b402", "fullName": "test_cases.test_web.TestWeb#test_verify_login"}